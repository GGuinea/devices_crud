package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	domain_model "devices_crud/internal/devices/model"
	"devices_crud/internal/drivers/graph/generated"
	"devices_crud/internal/drivers/graph/model"
	"fmt"
)

// CreateDevice is the resolver for the createDevice field.
func (r *mutationResolver) CreateDevice(ctx context.Context, input model.NewDevice) (*model.Device, error) {
	newDevice := &domain_model.NewDeviceRequest{
		Name:        input.Name,
		DeviceBrand: input.DeviceBrand,
	}
	res, err := r.DeviceService.AddDevice(ctx, newDevice)
	if err != nil {
		return nil, err
	}

	return &model.Device{
		ID:          *res,
		Name:        input.Name,
		DeviceBrand: input.DeviceBrand,
	}, nil
}

// UpdateDevice is the resolver for the updateDevice field.
func (r *mutationResolver) UpdateDevice(ctx context.Context, deviceID string, input model.NewDevice) (*model.Device, error) {
	panic(fmt.Errorf("not implemented: UpdateDevice - updateDevice"))
}

// Devices is the resolver for the devices field.
func (r *queryResolver) Devices(ctx context.Context) ([]*model.Device, error) {
	res, err := r.DeviceService.GetAllDevices(ctx)
	if err != nil {
		return nil, err
	}
	respones := make([]*model.Device, len(res))
	for i, v := range res {
		respones[i] = &model.Device{
			ID:          v.ID,
			Name:        v.Name,
			DeviceBrand: v.DeviceBrand,
			CreatedAt:   v.CreatedAt.String(),
		}
	}
	return respones, nil
}

// Device is the resolver for the device field.
func (r *queryResolver) Device(ctx context.Context, id string) (*model.Device, error) {
	panic(fmt.Errorf("not implemented: Device - device"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
